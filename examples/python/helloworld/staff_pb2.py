# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: staff.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0bstaff.proto\x12\x05staff\"4\n\x06\x41\x64\x64\x44oc\x12\r\n\x05\x64ocID\x18\x01 \x01(\x05\x12\x0c\n\x04name\x18\x02 \x01(\t\x12\r\n\x05title\x18\x03 \x01(\t\"\x1e\n\x0b\x41\x64\x64\x44ocReply\x12\x0f\n\x07message\x18\x01 \x01(\t2@\n\x0cStaffManager\x12\x30\n\tAddDoctor\x12\r.staff.AddDoc\x1a\x12.staff.AddDocReply\"\x00\x42+\n\x16io.grpc.examples.staffB\nStaffProtoP\x01\xa2\x02\x02SMb\x06proto3')



_ADDDOC = DESCRIPTOR.message_types_by_name['AddDoc']
_ADDDOCREPLY = DESCRIPTOR.message_types_by_name['AddDocReply']
AddDoc = _reflection.GeneratedProtocolMessageType('AddDoc', (_message.Message,), {
  'DESCRIPTOR' : _ADDDOC,
  '__module__' : 'staff_pb2'
  # @@protoc_insertion_point(class_scope:staff.AddDoc)
  })
_sym_db.RegisterMessage(AddDoc)

AddDocReply = _reflection.GeneratedProtocolMessageType('AddDocReply', (_message.Message,), {
  'DESCRIPTOR' : _ADDDOCREPLY,
  '__module__' : 'staff_pb2'
  # @@protoc_insertion_point(class_scope:staff.AddDocReply)
  })
_sym_db.RegisterMessage(AddDocReply)

_STAFFMANAGER = DESCRIPTOR.services_by_name['StaffManager']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\026io.grpc.examples.staffB\nStaffProtoP\001\242\002\002SM'
  _ADDDOC._serialized_start=22
  _ADDDOC._serialized_end=74
  _ADDDOCREPLY._serialized_start=76
  _ADDDOCREPLY._serialized_end=106
  _STAFFMANAGER._serialized_start=108
  _STAFFMANAGER._serialized_end=172
# @@protoc_insertion_point(module_scope)
